{
  "Comment": "Brandora scoring pipeline",
  "StartAt": "ValidateAndSnapshot",
  "States": {
    "ValidateAndSnapshot": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:YOUR_REGION:YOUR_ACCOUNT_ID:function:validate_and_snapshot",
      "TimeoutSeconds": 30,
      "Retry": [
        {
          "ErrorEquals": ["States.ALL"],
          "IntervalSeconds": 2,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "MarkFailure"
        }
      ],
      "Next": "RunMetricsInParallel"
    },
    "RunMetricsInParallel": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "FootTraffic",
          "States": {
            "FootTraffic": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:YOUR_REGION:YOUR_ACCOUNT_ID:function:metric_foot_traffic",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 2,
                  "BackoffRate": 2.0
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "AvgOrderDollar",
          "States": {
            "AvgOrderDollar": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:YOUR_REGION:YOUR_ACCOUNT_ID:function:metric_avg_order_value",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 2,
                  "BackoffRate": 2.0
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "CategoryFit",
          "States": {
            "CategoryFit": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:YOUR_REGION:YOUR_ACCOUNT_ID:function:metric_category_fit",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 2,
                  "BackoffRate": 2.0
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "Margin",
          "States": {
            "Margin": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:YOUR_REGION:YOUR_ACCOUNT_ID:function:metric_margin",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 2,
                  "BackoffRate": 2.0
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "LeadTime",
          "States": {
            "LeadTime": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:YOUR_REGION:YOUR_ACCOUNT_ID:function:metric_lead_time",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 2,
                  "BackoffRate": 2.0
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "BrandAlignment",
          "States": {
            "BrandAlignment": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:YOUR_REGION:YOUR_ACCOUNT_ID:function:metric_brand_alignment",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 2,
                  "BackoffRate": 2.0
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "GeoProximity",
          "States": {
            "GeoProximity": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:YOUR_REGION:YOUR_ACCOUNT_ID:function:metric_geo_proximity",
              "TimeoutSeconds": 60,
              "Retry": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 2,
                  "BackoffRate": 2.0
                }
              ],
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "MarkFailure"
        }
      ],
      "Next": "AggregateAndCommit"
    },
    "AggregateAndCommit": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:YOUR_REGION:YOUR_ACCOUNT_ID:function:aggregate_and_commit",
      "TimeoutSeconds": 60,
      "Retry": [
        {
          "ErrorEquals": ["States.ALL"],
          "IntervalSeconds": 2,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "ResultPath": "$.error",
          "Next": "MarkFailure"
        }
      ],
      "Next": "MarkSuccess"
    },
    "MarkSuccess": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:YOUR_REGION:YOUR_ACCOUNT_ID:function:mark_success",
      "End": true
    },
    "MarkFailure": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:YOUR_REGION:YOUR_ACCOUNT_ID:function:mark_failure",
      "End": true
    }
  }
}
